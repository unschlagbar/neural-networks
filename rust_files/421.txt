use serde::{Deserialize, Serialize};
use std::fmt;
#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum GameRule {
    AllowFireTicksAwayFromPlayer,
    AnnounceAdvancements,
    BlockExplosionDropDecay,
    CommandBlockOutput,
    CommandModificationBlockLimit,
    DisableElytraMovementCheck,
    DisablePlayerMovementCheck,
    DisableRaids,
    DoDaylightCycle,
    DoEntityDrops,
    DoFireTick,
    DoImmediateRespawn,
    DoInsomnia,
    DoLimitedCrafting,
    DoMobLoot,
    DoMobSpawning,
    DoPatrolSpawning,
    DoTileDrops,
    DoTraderSpawning,
    DoVinesSpread,
    DoWardenSpawning,
    DoWeatherCycle,
    DrowningDamage,
    EnderPearlsVanishOnDeath,
    FallDamage,
    FireDamage,
    ForgiveDeadPlayers,
    FreezeDamage,
    GlobalSoundEvents,
    KeepInventory,
    LavaSourceConversion,
    LocatorBar,
    LogAdminCommands,
    MaxCommandChainLength,
    MaxCommandForkCount,
    MaxEntityCramming,
    MobExplosionDropDecay,
    MobGriefing,
    NaturalRegeneration,
    PlayersNetherPortalCreativeDelay,
    PlayersNetherPortalDefaultDelay,
    PlayersSleepingPercentage,
    ProjectilesCanBreakBlocks,
    RandomTickSpeed,
    ReducedDebugInfo,
    SendCommandFeedback,
    ShowDeathMessages,
    SnowAccumulationHeight,
    SpawnChunkRadius,
    SpawnRadius,
    SpectatorsGenerateChunks,
    TntExplodes,
    TntExplosionDropDecay,
    UniversalAnger,
    WaterSourceConversion,
}
impl GameRule {
    pub const fn all() -> &'static [Self] {
        &[
            Self::AllowFireTicksAwayFromPlayer,
            Self::AnnounceAdvancements,
            Self::BlockExplosionDropDecay,
            Self::CommandBlockOutput,
            Self::CommandModificationBlockLimit,
            Self::DisableElytraMovementCheck,
            Self::DisablePlayerMovementCheck,
            Self::DisableRaids,
            Self::DoDaylightCycle,
            Self::DoEntityDrops,
            Self::DoFireTick,
            Self::DoImmediateRespawn,
            Self::DoInsomnia,
            Self::DoLimitedCrafting,
            Self::DoMobLoot,
            Self::DoMobSpawning,
            Self::DoPatrolSpawning,
            Self::DoTileDrops,
            Self::DoTraderSpawning,
            Self::DoVinesSpread,
            Self::DoWardenSpawning,
            Self::DoWeatherCycle,
            Self::DrowningDamage,
            Self::EnderPearlsVanishOnDeath,
            Self::FallDamage,
            Self::FireDamage,
            Self::ForgiveDeadPlayers,
            Self::FreezeDamage,
            Self::GlobalSoundEvents,
            Self::KeepInventory,
            Self::LavaSourceConversion,
            Self::LocatorBar,
            Self::LogAdminCommands,
            Self::MaxCommandChainLength,
            Self::MaxCommandForkCount,
            Self::MaxEntityCramming,
            Self::MobExplosionDropDecay,
            Self::MobGriefing,
            Self::NaturalRegeneration,
            Self::PlayersNetherPortalCreativeDelay,
            Self::PlayersNetherPortalDefaultDelay,
            Self::PlayersSleepingPercentage,
            Self::ProjectilesCanBreakBlocks,
            Self::RandomTickSpeed,
            Self::ReducedDebugInfo,
            Self::SendCommandFeedback,
            Self::ShowDeathMessages,
            Self::SnowAccumulationHeight,
            Self::SpawnChunkRadius,
            Self::SpawnRadius,
            Self::SpectatorsGenerateChunks,
            Self::TntExplodes,
            Self::TntExplosionDropDecay,
            Self::UniversalAnger,
            Self::WaterSourceConversion,
        ]
    }
}
impl fmt::Display for GameRule {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Self::AllowFireTicksAwayFromPlayer => write!(f, "allowFireTicksAwayFromPlayer"),
            Self::AnnounceAdvancements => write!(f, "announceAdvancements"),
            Self::BlockExplosionDropDecay => write!(f, "blockExplosionDropDecay"),
            Self::CommandBlockOutput => write!(f, "commandBlockOutput"),
            Self::CommandModificationBlockLimit => write!(f, "commandModificationBlockLimit"),
            Self::DisableElytraMovementCheck => write!(f, "disableElytraMovementCheck"),
            Self::DisablePlayerMovementCheck => write!(f, "disablePlayerMovementCheck"),
            Self::DisableRaids => write!(f, "disableRaids"),
            Self::DoDaylightCycle => write!(f, "doDaylightCycle"),
            Self::DoEntityDrops => write!(f, "doEntityDrops"),
            Self::DoFireTick => write!(f, "doFireTick"),
            Self::DoImmediateRespawn => write!(f, "doImmediateRespawn"),
            Self::DoInsomnia => write!(f, "doInsomnia"),
            Self::DoLimitedCrafting => write!(f, "doLimitedCrafting"),
            Self::DoMobLoot => write!(f, "doMobLoot"),
            Self::DoMobSpawning => write!(f, "doMobSpawning"),
            Self::DoPatrolSpawning => write!(f, "doPatrolSpawning"),
            Self::DoTileDrops => write!(f, "doTileDrops"),
            Self::DoTraderSpawning => write!(f, "doTraderSpawning"),
            Self::DoVinesSpread => write!(f, "doVinesSpread"),
            Self::DoWardenSpawning => write!(f, "doWardenSpawning"),
            Self::DoWeatherCycle => write!(f, "doWeatherCycle"),
            Self::DrowningDamage => write!(f, "drowningDamage"),
            Self::EnderPearlsVanishOnDeath => write!(f, "enderPearlsVanishOnDeath"),
            Self::FallDamage => write!(f, "fallDamage"),
            Self::FireDamage => write!(f, "fireDamage"),
            Self::ForgiveDeadPlayers => write!(f, "forgiveDeadPlayers"),
            Self::FreezeDamage => write!(f, "freezeDamage"),
            Self::GlobalSoundEvents => write!(f, "globalSoundEvents"),
            Self::KeepInventory => write!(f, "keepInventory"),
            Self::LavaSourceConversion => write!(f, "lavaSourceConversion"),
            Self::LocatorBar => write!(f, "locatorBar"),
            Self::LogAdminCommands => write!(f, "logAdminCommands"),
            Self::MaxCommandChainLength => write!(f, "maxCommandChainLength"),
            Self::MaxCommandForkCount => write!(f, "maxCommandForkCount"),
            Self::MaxEntityCramming => write!(f, "maxEntityCramming"),
            Self::MobExplosionDropDecay => write!(f, "mobExplosionDropDecay"),
            Self::MobGriefing => write!(f, "mobGriefing"),
            Self::NaturalRegeneration => write!(f, "naturalRegeneration"),
            Self::PlayersNetherPortalCreativeDelay => write!(f, "playersNetherPortalCreativeDelay"),
            Self::PlayersNetherPortalDefaultDelay => write!(f, "playersNetherPortalDefaultDelay"),
            Self::PlayersSleepingPercentage => write!(f, "playersSleepingPercentage"),
            Self::ProjectilesCanBreakBlocks => write!(f, "projectilesCanBreakBlocks"),
            Self::RandomTickSpeed => write!(f, "randomTickSpeed"),
            Self::ReducedDebugInfo => write!(f, "reducedDebugInfo"),
            Self::SendCommandFeedback => write!(f, "sendCommandFeedback"),
            Self::ShowDeathMessages => write!(f, "showDeathMessages"),
            Self::SnowAccumulationHeight => write!(f, "snowAccumulationHeight"),
            Self::SpawnChunkRadius => write!(f, "spawnChunkRadius"),
            Self::SpawnRadius => write!(f, "spawnRadius"),
            Self::SpectatorsGenerateChunks => write!(f, "spectatorsGenerateChunks"),
            Self::TntExplodes => write!(f, "tntExplodes"),
            Self::TntExplosionDropDecay => write!(f, "tntExplosionDropDecay"),
            Self::UniversalAnger => write!(f, "universalAnger"),
            Self::WaterSourceConversion => write!(f, "waterSourceConversion"),
        }
    }
}
#[derive(Serialize, Deserialize, PartialEq, Eq, Clone, Debug)]
pub struct GameRuleRegistry {
    #[serde(rename = "allowFireTicksAwayFromPlayer")]
    #[serde(default = "default_allow_fire_ticks_away_from_player")]
    #[serde(with = "as_string")]
    pub allow_fire_ticks_away_from_player: bool,
    #[serde(rename = "announceAdvancements")]
    #[serde(default = "default_announce_advancements")]
    #[serde(with = "as_string")]
    pub announce_advancements: bool,
    #[serde(rename = "blockExplosionDropDecay")]
    #[serde(default = "default_block_explosion_drop_decay")]
    #[serde(with = "as_string")]
    pub block_explosion_drop_decay: bool,
    #[serde(rename = "commandBlockOutput")]
    #[serde(default = "default_command_block_output")]
    #[serde(with = "as_string")]
    pub command_block_output: bool,
    #[serde(rename = "commandModificationBlockLimit")]
    #[serde(default = "default_command_modification_block_limit")]
    #[serde(with = "as_string")]
    pub command_modification_block_limit: i64,
    #[serde(rename = "disableElytraMovementCheck")]
    #[serde(default = "default_disable_elytra_movement_check")]
    #[serde(with = "as_string")]
    pub disable_elytra_movement_check: bool,
    #[serde(rename = "disablePlayerMovementCheck")]
    #[serde(default = "default_disable_player_movement_check")]
    #[serde(with = "as_string")]
    pub disable_player_movement_check: bool,
    #[serde(rename = "disableRaids")]
    #[serde(default = "default_disable_raids")]
    #[serde(with = "as_string")]
    pub disable_raids: bool,
    #[serde(rename = "doDaylightCycle")]
    #[serde(default = "default_do_daylight_cycle")]
    #[serde(with = "as_string")]
    pub do_daylight_cycle: bool,
    #[serde(rename = "doEntityDrops")]
    #[serde(default = "default_do_entity_drops")]
    #[serde(with = "as_string")]
    pub do_entity_drops: bool,
    #[serde(rename = "doFireTick")]
    #[serde(default = "default_do_fire_tick")]
    #[serde(with = "as_string")]
    pub do_fire_tick: bool,
    #[serde(rename = "doImmediateRespawn")]
    #[serde(default = "default_do_immediate_respawn")]
    #[serde(with = "as_string")]
    pub do_immediate_respawn: bool,
    #[serde(rename = "doInsomnia")]
    #[serde(default = "default_do_insomnia")]
    #[serde(with = "as_string")]
    pub do_insomnia: bool,
    #[serde(rename = "doLimitedCrafting")]
    #[serde(default = "default_do_limited_crafting")]
    #[serde(with = "as_string")]
    pub do_limited_crafting: bool,
    #[serde(rename = "doMobLoot")]
    #[serde(default = "default_do_mob_loot")]
    #[serde(with = "as_string")]
    pub do_mob_loot: bool,
    #[serde(rename = "doMobSpawning")]
    #[serde(default = "default_do_mob_spawning")]
    #[serde(with = "as_string")]
    pub do_mob_spawning: bool,
    #[serde(rename = "doPatrolSpawning")]
    #[serde(default = "default_do_patrol_spawning")]
    #[serde(with = "as_string")]
    pub do_patrol_spawning: bool,
    #[serde(rename = "doTileDrops")]
    #[serde(default = "default_do_tile_drops")]
    #[serde(with = "as_string")]
    pub do_tile_drops: bool,
    #[serde(rename = "doTraderSpawning")]
    #[serde(default = "default_do_trader_spawning")]
    #[serde(with = "as_string")]
    pub do_trader_spawning: bool,
    #[serde(rename = "doVinesSpread")]
    #[serde(default = "default_do_vines_spread")]
    #[serde(with = "as_string")]
    pub do_vines_spread: bool,
    #[serde(rename = "doWardenSpawning")]
    #[serde(default = "default_do_warden_spawning")]
    #[serde(with = "as_string")]
    pub do_warden_spawning: bool,
    #[serde(rename = "doWeatherCycle")]
    #[serde(default = "default_do_weather_cycle")]
    #[serde(with = "as_string")]
    pub do_weather_cycle: bool,
    #[serde(rename = "drowningDamage")]
    #[serde(default = "default_drowning_damage")]
    #[serde(with = "as_string")]
    pub drowning_damage: bool,
    #[serde(rename = "enderPearlsVanishOnDeath")]
    #[serde(default = "default_ender_pearls_vanish_on_death")]
    #[serde(with = "as_string")]
    pub ender_pearls_vanish_on_death: bool,
    #[serde(rename = "fallDamage")]
    #[serde(default = "default_fall_damage")]
    #[serde(with = "as_string")]
    pub fall_damage: bool,
    #[serde(rename = "fireDamage")]
    #[serde(default = "default_fire_damage")]
    #[serde(with = "as_string")]
    pub fire_damage: bool,
    #[serde(rename = "forgiveDeadPlayers")]
    #[serde(default = "default_forgive_dead_players")]
    #[serde(with = "as_string")]
    pub forgive_dead_players: bool,
    #[serde(rename = "freezeDamage")]
    #[serde(default = "default_freeze_damage")]
    #[serde(with = "as_string")]
    pub freeze_damage: bool,
    #[serde(rename = "globalSoundEvents")]
    #[serde(default = "default_global_sound_events")]
    #[serde(with = "as_string")]
    pub global_sound_events: bool,
    #[serde(rename = "keepInventory")]
    #[serde(default = "default_keep_inventory")]
    #[serde(with = "as_string")]
    pub keep_inventory: bool,
    #[serde(rename = "lavaSourceConversion")]
    #[serde(default = "default_lava_source_conversion")]
    #[serde(with = "as_string")]
    pub lava_source_conversion: bool,
    #[serde(rename = "locatorBar")]
    #[serde(default = "default_locator_bar")]
    #[serde(with = "as_string")]
    pub locator_bar: bool,
    #[serde(rename = "logAdminCommands")]
    #[serde(default = "default_log_admin_commands")]
    #[serde(with = "as_string")]
    pub log_admin_commands: bool,
    #[serde(rename = "maxCommandChainLength")]
    #[serde(default = "default_max_command_chain_length")]
    #[serde(with = "as_string")]
    pub max_command_chain_length: i64,
    #[serde(rename = "maxCommandForkCount")]
    #[serde(default = "default_max_command_fork_count")]
    #[serde(with = "as_string")]
    pub max_command_fork_count: i64,
    #[serde(rename = "maxEntityCramming")]
    #[serde(default = "default_max_entity_cramming")]
    #[serde(with = "as_string")]
    pub max_entity_cramming: i64,
    #[serde(rename = "mobExplosionDropDecay")]
    #[serde(default = "default_mob_explosion_drop_decay")]
    #[serde(with = "as_string")]
    pub mob_explosion_drop_decay: bool,
    #[serde(rename = "mobGriefing")]
    #[serde(default = "default_mob_griefing")]
    #[serde(with = "as_string")]
    pub mob_griefing: bool,
    #[serde(rename = "naturalRegeneration")]
    #[serde(default = "default_natural_regeneration")]
    #[serde(with = "as_string")]
    pub natural_regeneration: bool,
    #[serde(rename = "playersNetherPortalCreativeDelay")]
    #[serde(default = "default_players_nether_portal_creative_delay")]
    #[serde(with = "as_string")]
    pub players_nether_portal_creative_delay: i64,
    #[serde(rename = "playersNetherPortalDefaultDelay")]
    #[serde(default = "default_players_nether_portal_default_delay")]
    #[serde(with = "as_string")]
    pub players_nether_portal_default_delay: i64,
    #[serde(rename = "playersSleepingPercentage")]
    #[serde(default = "default_players_sleeping_percentage")]
    #[serde(with = "as_string")]
    pub players_sleeping_percentage: i64,
    #[serde(rename = "projectilesCanBreakBlocks")]
    #[serde(default = "default_projectiles_can_break_blocks")]
    #[serde(with = "as_string")]
    pub projectiles_can_break_blocks: bool,
    #[serde(rename = "randomTickSpeed")]
    #[serde(default = "default_random_tick_speed")]
    #[serde(with = "as_string")]
    pub random_tick_speed: i64,
    #[serde(rename = "reducedDebugInfo")]
    #[serde(default = "default_reduced_debug_info")]
    #[serde(with = "as_string")]
    pub reduced_debug_info: bool,
    #[serde(rename = "sendCommandFeedback")]
    #[serde(default = "default_send_command_feedback")]
    #[serde(with = "as_string")]
    pub send_command_feedback: bool,
    #[serde(rename = "showDeathMessages")]
    #[serde(default = "default_show_death_messages")]
    #[serde(with = "as_string")]
    pub show_death_messages: bool,
    #[serde(rename = "snowAccumulationHeight")]
    #[serde(default = "default_snow_accumulation_height")]
    #[serde(with = "as_string")]
    pub snow_accumulation_height: i64,
    #[serde(rename = "spawnChunkRadius")]
    #[serde(default = "default_spawn_chunk_radius")]
    #[serde(with = "as_string")]
    pub spawn_chunk_radius: i64,
    #[serde(rename = "spawnRadius")]
    #[serde(default = "default_spawn_radius")]
    #[serde(with = "as_string")]
    pub spawn_radius: i64,
    #[serde(rename = "spectatorsGenerateChunks")]
    #[serde(default = "default_spectators_generate_chunks")]
    #[serde(with = "as_string")]
    pub spectators_generate_chunks: bool,
    #[serde(rename = "tntExplodes")]
    #[serde(default = "default_tnt_explodes")]
    #[serde(with = "as_string")]
    pub tnt_explodes: bool,
    #[serde(rename = "tntExplosionDropDecay")]
    #[serde(default = "default_tnt_explosion_drop_decay")]
    #[serde(with = "as_string")]
    pub tnt_explosion_drop_decay: bool,
    #[serde(rename = "universalAnger")]
    #[serde(default = "default_universal_anger")]
    #[serde(with = "as_string")]
    pub universal_anger: bool,
    #[serde(rename = "waterSourceConversion")]
    #[serde(default = "default_water_source_conversion")]
    #[serde(with = "as_string")]
    pub water_source_conversion: bool,
}
pub enum GameRuleValue<I, B> {
    Int(I),
    Bool(B),
}
impl<I: fmt::Display, B: fmt::Display> fmt::Display for GameRuleValue<I, B> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Self::Int(v) => write!(f, "{v}"),
            Self::Bool(v) => write!(f, "{v}"),
        }
    }
}
impl GameRuleRegistry {
    pub fn get(&self, rule: &GameRule) -> GameRuleValue<&i64, &bool> {
        match rule {
            GameRule::AllowFireTicksAwayFromPlayer => {
                GameRuleValue::Bool(&self.allow_fire_ticks_away_from_player)
            }
            GameRule::AnnounceAdvancements => GameRuleValue::Bool(&self.announce_advancements),
            GameRule::BlockExplosionDropDecay => {
                GameRuleValue::Bool(&self.block_explosion_drop_decay)
            }
            GameRule::CommandBlockOutput => GameRuleValue::Bool(&self.command_block_output),
            GameRule::CommandModificationBlockLimit => {
                GameRuleValue::Int(&self.command_modification_block_limit)
            }
            GameRule::DisableElytraMovementCheck => {
                GameRuleValue::Bool(&self.disable_elytra_movement_check)
            }
            GameRule::DisablePlayerMovementCheck => {
                GameRuleValue::Bool(&self.disable_player_movement_check)
            }
            GameRule::DisableRaids => GameRuleValue::Bool(&self.disable_raids),
            GameRule::DoDaylightCycle => GameRuleValue::Bool(&self.do_daylight_cycle),
            GameRule::DoEntityDrops => GameRuleValue::Bool(&self.do_entity_drops),
            GameRule::DoFireTick => GameRuleValue::Bool(&self.do_fire_tick),
            GameRule::DoImmediateRespawn => GameRuleValue::Bool(&self.do_immediate_respawn),
            GameRule::DoInsomnia => GameRuleValue::Bool(&self.do_insomnia),
            GameRule::DoLimitedCrafting => GameRuleValue::Bool(&self.do_limited_crafting),
            GameRule::DoMobLoot => GameRuleValue::Bool(&self.do_mob_loot),
            GameRule::DoMobSpawning => GameRuleValue::Bool(&self.do_mob_spawning),
            GameRule::DoPatrolSpawning => GameRuleValue::Bool(&self.do_patrol_spawning),
            GameRule::DoTileDrops => GameRuleValue::Bool(&self.do_tile_drops),
            GameRule::DoTraderSpawning => GameRuleValue::Bool(&self.do_trader_spawning),
            GameRule::DoVinesSpread => GameRuleValue::Bool(&self.do_vines_spread),
            GameRule::DoWardenSpawning => GameRuleValue::Bool(&self.do_warden_spawning),
            GameRule::DoWeatherCycle => GameRuleValue::Bool(&self.do_weather_cycle),
            GameRule::DrowningDamage => GameRuleValue::Bool(&self.drowning_damage),
            GameRule::EnderPearlsVanishOnDeath => {
                GameRuleValue::Bool(&self.ender_pearls_vanish_on_death)
            }
            GameRule::FallDamage => GameRuleValue::Bool(&self.fall_damage),
            GameRule::FireDamage => GameRuleValue::Bool(&self.fire_damage),
            GameRule::ForgiveDeadPlayers => GameRuleValue::Bool(&self.forgive_dead_players),
            GameRule::FreezeDamage => GameRuleValue::Bool(&self.freeze_damage),
            GameRule::GlobalSoundEvents => GameRuleValue::Bool(&self.global_sound_events),
            GameRule::KeepInventory => GameRuleValue::Bool(&self.keep_inventory),
            GameRule::LavaSourceConversion => GameRuleValue::Bool(&self.lava_source_conversion),
            GameRule::LocatorBar => GameRuleValue::Bool(&self.locator_bar),
            GameRule::LogAdminCommands => GameRuleValue::Bool(&self.log_admin_commands),
            GameRule::MaxCommandChainLength => GameRuleValue::Int(&self.max_command_chain_length),
            GameRule::MaxCommandForkCount => GameRuleValue::Int(&self.max_command_fork_count),
            GameRule::MaxEntityCramming => GameRuleValue::Int(&self.max_entity_cramming),
            GameRule::MobExplosionDropDecay => GameRuleValue::Bool(&self.mob_explosion_drop_decay),
            GameRule::MobGriefing => GameRuleValue::Bool(&self.mob_griefing),
            GameRule::NaturalRegeneration => GameRuleValue::Bool(&self.natural_regeneration),
            GameRule::PlayersNetherPortalCreativeDelay => {
                GameRuleValue::Int(&self.players_nether_portal_creative_delay)
            }
            GameRule::PlayersNetherPortalDefaultDelay => {
                GameRuleValue::Int(&self.players_nether_portal_default_delay)
            }
            GameRule::PlayersSleepingPercentage => {
                GameRuleValue::Int(&self.players_sleeping_percentage)
            }
            GameRule::ProjectilesCanBreakBlocks => {
                GameRuleValue::Bool(&self.projectiles_can_break_blocks)
            }
            GameRule::RandomTickSpeed => GameRuleValue::Int(&self.random_tick_speed),
            GameRule::ReducedDebugInfo => GameRuleValue::Bool(&self.reduced_debug_info),
            GameRule::SendCommandFeedback => GameRuleValue::Bool(&self.send_command_feedback),
            GameRule::ShowDeathMessages => GameRuleValue::Bool(&self.show_death_messages),
            GameRule::SnowAccumulationHeight => GameRuleValue::Int(&self.snow_accumulation_height),
            GameRule::SpawnChunkRadius => GameRuleValue::Int(&self.spawn_chunk_radius),
            GameRule::SpawnRadius => GameRuleValue::Int(&self.spawn_radius),
            GameRule::SpectatorsGenerateChunks => {
                GameRuleValue::Bool(&self.spectators_generate_chunks)
            }
            GameRule::TntExplodes => GameRuleValue::Bool(&self.tnt_explodes),
            GameRule::TntExplosionDropDecay => GameRuleValue::Bool(&self.tnt_explosion_drop_decay),
            GameRule::UniversalAnger => GameRuleValue::Bool(&self.universal_anger),
            GameRule::WaterSourceConversion => GameRuleValue::Bool(&self.water_source_conversion),
        }
    }
    pub fn get_mut(&mut self, rule: &GameRule) -> GameRuleValue<&mut i64, &mut bool> {
        match rule {
            GameRule::AllowFireTicksAwayFromPlayer => {
                GameRuleValue::Bool(&mut self.allow_fire_ticks_away_from_player)
            }
            GameRule::AnnounceAdvancements => GameRuleValue::Bool(&mut self.announce_advancements),
            GameRule::BlockExplosionDropDecay => {
                GameRuleValue::Bool(&mut self.block_explosion_drop_decay)
            }
            GameRule::CommandBlockOutput => GameRuleValue::Bool(&mut self.command_block_output),
            GameRule::CommandModificationBlockLimit => {
                GameRuleValue::Int(&mut self.command_modification_block_limit)
            }
            GameRule::DisableElytraMovementCheck => {
                GameRuleValue::Bool(&mut self.disable_elytra_movement_check)
            }
            GameRule::DisablePlayerMovementCheck => {
                GameRuleValue::Bool(&mut self.disable_player_movement_check)
            }
            GameRule::DisableRaids => GameRuleValue::Bool(&mut self.disable_raids),
            GameRule::DoDaylightCycle => GameRuleValue::Bool(&mut self.do_daylight_cycle),
            GameRule::DoEntityDrops => GameRuleValue::Bool(&mut self.do_entity_drops),
            GameRule::DoFireTick => GameRuleValue::Bool(&mut self.do_fire_tick),
            GameRule::DoImmediateRespawn => GameRuleValue::Bool(&mut self.do_immediate_respawn),
            GameRule::DoInsomnia => GameRuleValue::Bool(&mut self.do_insomnia),
            GameRule::DoLimitedCrafting => GameRuleValue::Bool(&mut self.do_limited_crafting),
            GameRule::DoMobLoot => GameRuleValue::Bool(&mut self.do_mob_loot),
            GameRule::DoMobSpawning => GameRuleValue::Bool(&mut self.do_mob_spawning),
            GameRule::DoPatrolSpawning => GameRuleValue::Bool(&mut self.do_patrol_spawning),
            GameRule::DoTileDrops => GameRuleValue::Bool(&mut self.do_tile_drops),
            GameRule::DoTraderSpawning => GameRuleValue::Bool(&mut self.do_trader_spawning),
            GameRule::DoVinesSpread => GameRuleValue::Bool(&mut self.do_vines_spread),
            GameRule::DoWardenSpawning => GameRuleValue::Bool(&mut self.do_warden_spawning),
            GameRule::DoWeatherCycle => GameRuleValue::Bool(&mut self.do_weather_cycle),
            GameRule::DrowningDamage => GameRuleValue::Bool(&mut self.drowning_damage),
            GameRule::EnderPearlsVanishOnDeath => {
                GameRuleValue::Bool(&mut self.ender_pearls_vanish_on_death)
            }
            GameRule::FallDamage => GameRuleValue::Bool(&mut self.fall_damage),
            GameRule::FireDamage => GameRuleValue::Bool(&mut self.fire_damage),
            GameRule::ForgiveDeadPlayers => GameRuleValue::Bool(&mut self.forgive_dead_players),
            GameRule::FreezeDamage => GameRuleValue::Bool(&mut self.freeze_damage),
            GameRule::GlobalSoundEvents => GameRuleValue::Bool(&mut self.global_sound_events),
            GameRule::KeepInventory => GameRuleValue::Bool(&mut self.keep_inventory),
            GameRule::LavaSourceConversion => GameRuleValue::Bool(&mut self.lava_source_conversion),
            GameRule::LocatorBar => GameRuleValue::Bool(&mut self.locator_bar),
            GameRule::LogAdminCommands => GameRuleValue::Bool(&mut self.log_admin_commands),
            GameRule::MaxCommandChainLength => {
                GameRuleValue::Int(&mut self.max_command_chain_length)
            }
            GameRule::MaxCommandForkCount => GameRuleValue::Int(&mut self.max_command_fork_count),
            GameRule::MaxEntityCramming => GameRuleValue::Int(&mut self.max_entity_cramming),
            GameRule::MobExplosionDropDecay => {
                GameRuleValue::Bool(&mut self.mob_explosion_drop_decay)
            }
            GameRule::MobGriefing => GameRuleValue::Bool(&mut self.mob_griefing),
            GameRule::NaturalRegeneration => GameRuleValue::Bool(&mut self.natural_regeneration),
            GameRule::PlayersNetherPortalCreativeDelay => {
                GameRuleValue::Int(&mut self.players_nether_portal_creative_delay)
            }
            GameRule::PlayersNetherPortalDefaultDelay => {
                GameRuleValue::Int(&mut self.players_nether_portal_default_delay)
            }
            GameRule::PlayersSleepingPercentage => {
                GameRuleValue::Int(&mut self.players_sleeping_percentage)
            }
            GameRule::ProjectilesCanBreakBlocks => {
                GameRuleValue::Bool(&mut self.projectiles_can_break_blocks)
            }
            GameRule::RandomTickSpeed => GameRuleValue::Int(&mut self.random_tick_speed),
            GameRule::ReducedDebugInfo => GameRuleValue::Bool(&mut self.reduced_debug_info),
            GameRule::SendCommandFeedback => GameRuleValue::Bool(&mut self.send_command_feedback),
            GameRule::ShowDeathMessages => GameRuleValue::Bool(&mut self.show_death_messages),
            GameRule::SnowAccumulationHeight => {
                GameRuleValue::Int(&mut self.snow_accumulation_height)
            }
            GameRule::SpawnChunkRadius => GameRuleValue::Int(&mut self.spawn_chunk_radius),
            GameRule::SpawnRadius => GameRuleValue::Int(&mut self.spawn_radius),
            GameRule::SpectatorsGenerateChunks => {
                GameRuleValue::Bool(&mut self.spectators_generate_chunks)
            }
            GameRule::TntExplodes => GameRuleValue::Bool(&mut self.tnt_explodes),
            GameRule::TntExplosionDropDecay => {
                GameRuleValue::Bool(&mut self.tnt_explosion_drop_decay)
            }
            GameRule::UniversalAnger => GameRuleValue::Bool(&mut self.universal_anger),
            GameRule::WaterSourceConversion => {
                GameRuleValue::Bool(&mut self.water_source_conversion)
            }
        }
    }
}
impl Default for GameRuleRegistry {
    fn default() -> Self {
        Self {
            allow_fire_ticks_away_from_player: false,
            announce_advancements: true,
            block_explosion_drop_decay: true,
            command_block_output: true,
            command_modification_block_limit: 32768i64,
            disable_elytra_movement_check: false,
            disable_player_movement_check: false,
            disable_raids: false,
            do_daylight_cycle: true,
            do_entity_drops: true,
            do_fire_tick: true,
            do_immediate_respawn: false,
            do_insomnia: true,
            do_limited_crafting: false,
            do_mob_loot: true,
            do_mob_spawning: true,
            do_patrol_spawning: true,
            do_tile_drops: true,
            do_trader_spawning: true,
            do_vines_spread: true,
            do_warden_spawning: true,
            do_weather_cycle: true,
            drowning_damage: true,
            ender_pearls_vanish_on_death: true,
            fall_damage: true,
            fire_damage: true,
            forgive_dead_players: true,
            freeze_damage: true,
            global_sound_events: true,
            keep_inventory: false,
            lava_source_conversion: false,
            locator_bar: true,
            log_admin_commands: true,
            max_command_chain_length: 65536i64,
            max_command_fork_count: 65536i64,
            max_entity_cramming: 24i64,
            mob_explosion_drop_decay: true,
            mob_griefing: true,
            natural_regeneration: true,
            players_nether_portal_creative_delay: 0i64,
            players_nether_portal_default_delay: 80i64,
            players_sleeping_percentage: 100i64,
            projectiles_can_break_blocks: true,
            random_tick_speed: 3i64,
            reduced_debug_info: false,
            send_command_feedback: true,
            show_death_messages: true,
            snow_accumulation_height: 1i64,
            spawn_chunk_radius: 2i64,
            spawn_radius: 10i64,
            spectators_generate_chunks: true,
            tnt_explodes: true,
            tnt_explosion_drop_decay: false,
            universal_anger: false,
            water_source_conversion: true,
        }
    }
}
fn default_allow_fire_ticks_away_from_player() -> bool {
    GameRuleRegistry::default().allow_fire_ticks_away_from_player
}
fn default_announce_advancements() -> bool {
    GameRuleRegistry::default().announce_advancements
}
fn default_block_explosion_drop_decay() -> bool {
    GameRuleRegistry::default().block_explosion_drop_decay
}
fn default_command_block_output() -> bool {
    GameRuleRegistry::default().command_block_output
}
fn default_command_modification_block_limit() -> i64 {
    GameRuleRegistry::default().command_modification_block_limit
}
fn default_disable_elytra_movement_check() -> bool {
    GameRuleRegistry::default().disable_elytra_movement_check
}
fn default_disable_player_movement_check() -> bool {
    GameRuleRegistry::default().disable_player_movement_check
}
fn default_disable_raids() -> bool {
    GameRuleRegistry::default().disable_raids
}
fn default_do_daylight_cycle() -> bool {
    GameRuleRegistry::default().do_daylight_cycle
}
fn default_do_entity_drops() -> bool {
    GameRuleRegistry::default().do_entity_drops
}
fn default_do_fire_tick() -> bool {
    GameRuleRegistry::default().do_fire_tick
}
fn default_do_immediate_respawn() -> bool {
    GameRuleRegistry::default().do_immediate_respawn
}
fn default_do_insomnia() -> bool {
    GameRuleRegistry::default().do_insomnia
}
fn default_do_limited_crafting() -> bool {
    GameRuleRegistry::default().do_limited_crafting
}
fn default_do_mob_loot() -> bool {
    GameRuleRegistry::default().do_mob_loot
}
fn default_do_mob_spawning() -> bool {
    GameRuleRegistry::default().do_mob_spawning
}
fn default_do_patrol_spawning() -> bool {
    GameRuleRegistry::default().do_patrol_spawning
}
fn default_do_tile_drops() -> bool {
    GameRuleRegistry::default().do_tile_drops
}
fn default_do_trader_spawning() -> bool {
    GameRuleRegistry::default().do_trader_spawning
}
fn default_do_vines_spread() -> bool {
    GameRuleRegistry::default().do_vines_spread
}
fn default_do_warden_spawning() -> bool {
    GameRuleRegistry::default().do_warden_spawning
}
fn default_do_weather_cycle() -> bool {
    GameRuleRegistry::default().do_weather_cycle
}
fn default_drowning_damage() -> bool {
    GameRuleRegistry::default().drowning_damage
}
fn default_ender_pearls_vanish_on_death() -> bool {
    GameRuleRegistry::default().ender_pearls_vanish_on_death
}
fn default_fall_damage() -> bool {
    GameRuleRegistry::default().fall_damage
}
fn default_fire_damage() -> bool {
    GameRuleRegistry::default().fire_damage
}
fn default_forgive_dead_players() -> bool {
    GameRuleRegistry::default().forgive_dead_players
}
fn default_freeze_damage() -> bool {
    GameRuleRegistry::default().freeze_damage
}
fn default_global_sound_events() -> bool {
    GameRuleRegistry::default().global_sound_events
}
fn default_keep_inventory() -> bool {
    GameRuleRegistry::default().keep_inventory
}
fn default_lava_source_conversion() -> bool {
    GameRuleRegistry::default().lava_source_conversion
}
fn default_locator_bar() -> bool {
    GameRuleRegistry::default().locator_bar
}
fn default_log_admin_commands() -> bool {
    GameRuleRegistry::default().log_admin_commands
}
fn default_max_command_chain_length() -> i64 {
    GameRuleRegistry::default().max_command_chain_length
}
fn default_max_command_fork_count() -> i64 {
    GameRuleRegistry::default().max_command_fork_count
}
fn default_max_entity_cramming() -> i64 {
    GameRuleRegistry::default().max_entity_cramming
}
fn default_mob_explosion_drop_decay() -> bool {
    GameRuleRegistry::default().mob_explosion_drop_decay
}
fn default_mob_griefing() -> bool {
    GameRuleRegistry::default().mob_griefing
}
fn default_natural_regeneration() -> bool {
    GameRuleRegistry::default().natural_regeneration
}
fn default_players_nether_portal_creative_delay() -> i64 {
    GameRuleRegistry::default().players_nether_portal_creative_delay
}
fn default_players_nether_portal_default_delay() -> i64 {
    GameRuleRegistry::default().players_nether_portal_default_delay
}
fn default_players_sleeping_percentage() -> i64 {
    GameRuleRegistry::default().players_sleeping_percentage
}
fn default_projectiles_can_break_blocks() -> bool {
    GameRuleRegistry::default().projectiles_can_break_blocks
}
fn default_random_tick_speed() -> i64 {
    GameRuleRegistry::default().random_tick_speed
}
fn default_reduced_debug_info() -> bool {
    GameRuleRegistry::default().reduced_debug_info
}
fn default_send_command_feedback() -> bool {
    GameRuleRegistry::default().send_command_feedback
}
fn default_show_death_messages() -> bool {
    GameRuleRegistry::default().show_death_messages
}
fn default_snow_accumulation_height() -> i64 {
    GameRuleRegistry::default().snow_accumulation_height
}
fn default_spawn_chunk_radius() -> i64 {
    GameRuleRegistry::default().spawn_chunk_radius
}
fn default_spawn_radius() -> i64 {
    GameRuleRegistry::default().spawn_radius
}
fn default_spectators_generate_chunks() -> bool {
    GameRuleRegistry::default().spectators_generate_chunks
}
fn default_tnt_explodes() -> bool {
    GameRuleRegistry::default().tnt_explodes
}
fn default_tnt_explosion_drop_decay() -> bool {
    GameRuleRegistry::default().tnt_explosion_drop_decay
}
fn default_universal_anger() -> bool {
    GameRuleRegistry::default().universal_anger
}
fn default_water_source_conversion() -> bool {
    GameRuleRegistry::default().water_source_conversion
}
mod as_string {
    use serde::{Deserialize, Deserializer, Serialize, Serializer};
    use std::{fmt::Display, str::FromStr};
    pub fn serialize<T: Display, S: Serializer>(
        value: &T,
        serializer: S,
    ) -> Result<S::Ok, S::Error> {
        serializer.serialize_str(&value.to_string())
    }
    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
    where
        T: FromStr,
        D: Deserializer<'de>,
        <T as FromStr>::Err: Display,
    {
        let s = String::deserialize(deserializer)?;
        s.parse::<T>().map_err(serde::de::Error::custom)
    }
}