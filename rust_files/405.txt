use std::hash::Hash;
#[derive(Clone, Debug)]
pub struct Attributes {
    pub id: u8,
    pub default_value: f64,
}
impl PartialEq for Attributes {
    fn eq(&self, other: &Self) -> bool {
        self.id == other.id
    }
}
impl Eq for Attributes {}
impl Hash for Attributes {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}
impl Attributes {
    pub const ARMOR: Self = Self {
        id: 0u8,
        default_value: 0f64,
    };
    pub const ARMOR_TOUGHNESS: Self = Self {
        id: 1u8,
        default_value: 0f64,
    };
    pub const ATTACK_DAMAGE: Self = Self {
        id: 2u8,
        default_value: 2f64,
    };
    pub const ATTACK_KNOCKBACK: Self = Self {
        id: 3u8,
        default_value: 0f64,
    };
    pub const ATTACK_SPEED: Self = Self {
        id: 4u8,
        default_value: 4f64,
    };
    pub const BLOCK_BREAK_SPEED: Self = Self {
        id: 5u8,
        default_value: 1f64,
    };
    pub const BLOCK_INTERACTION_RANGE: Self = Self {
        id: 6u8,
        default_value: 4.5f64,
    };
    pub const BURNING_TIME: Self = Self {
        id: 7u8,
        default_value: 1f64,
    };
    pub const CAMERA_DISTANCE: Self = Self {
        id: 8u8,
        default_value: 4f64,
    };
    pub const EXPLOSION_KNOCKBACK_RESISTANCE: Self = Self {
        id: 9u8,
        default_value: 0f64,
    };
    pub const ENTITY_INTERACTION_RANGE: Self = Self {
        id: 10u8,
        default_value: 3f64,
    };
    pub const FALL_DAMAGE_MULTIPLIER: Self = Self {
        id: 11u8,
        default_value: 1f64,
    };
    pub const FLYING_SPEED: Self = Self {
        id: 12u8,
        default_value: 0.4f64,
    };
    pub const FOLLOW_RANGE: Self = Self {
        id: 13u8,
        default_value: 32f64,
    };
    pub const GRAVITY: Self = Self {
        id: 14u8,
        default_value: 0.08f64,
    };
    pub const JUMP_STRENGTH: Self = Self {
        id: 15u8,
        default_value: 0.41999998688697815f64,
    };
    pub const KNOCKBACK_RESISTANCE: Self = Self {
        id: 16u8,
        default_value: 0f64,
    };
    pub const LUCK: Self = Self {
        id: 17u8,
        default_value: 0f64,
    };
    pub const MAX_ABSORPTION: Self = Self {
        id: 18u8,
        default_value: 0f64,
    };
    pub const MAX_HEALTH: Self = Self {
        id: 19u8,
        default_value: 20f64,
    };
    pub const MINING_EFFICIENCY: Self = Self {
        id: 20u8,
        default_value: 0f64,
    };
    pub const MOVEMENT_EFFICIENCY: Self = Self {
        id: 21u8,
        default_value: 0f64,
    };
    pub const MOVEMENT_SPEED: Self = Self {
        id: 22u8,
        default_value: 0.7f64,
    };
    pub const OXYGEN_BONUS: Self = Self {
        id: 23u8,
        default_value: 0f64,
    };
    pub const SAFE_FALL_DISTANCE: Self = Self {
        id: 24u8,
        default_value: 3f64,
    };
    pub const SCALE: Self = Self {
        id: 25u8,
        default_value: 1f64,
    };
    pub const SNEAKING_SPEED: Self = Self {
        id: 26u8,
        default_value: 0.3f64,
    };
    pub const SPAWN_REINFORCEMENTS: Self = Self {
        id: 27u8,
        default_value: 0f64,
    };
    pub const STEP_HEIGHT: Self = Self {
        id: 28u8,
        default_value: 0.6f64,
    };
    pub const SUBMERGED_MINING_SPEED: Self = Self {
        id: 29u8,
        default_value: 0.2f64,
    };
    pub const SWEEPING_DAMAGE_RATIO: Self = Self {
        id: 30u8,
        default_value: 0f64,
    };
    pub const TEMPT_RANGE: Self = Self {
        id: 31u8,
        default_value: 10f64,
    };
    pub const WATER_MOVEMENT_EFFICIENCY: Self = Self {
        id: 32u8,
        default_value: 0f64,
    };
    pub const WAYPOINT_TRANSMIT_RANGE: Self = Self {
        id: 33u8,
        default_value: 0f64,
    };
    pub const WAYPOINT_RECEIVE_RANGE: Self = Self {
        id: 34u8,
        default_value: 0f64,
    };
}